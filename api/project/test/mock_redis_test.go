// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/birdglove2/nitad-backend/redis (interfaces: RedisStorage)

// Package project_test is a generated GoMock package.
package project_test

import (
	reflect "reflect"

	redis "github.com/birdglove2/nitad-backend/redis"
	gomock "github.com/golang/mock/gomock"
)

// MockRedisStorage is a mock of RedisStorage interface.
type MockRedisStorage struct {
	ctrl     *gomock.Controller
	recorder *MockRedisStorageMockRecorder
}

// MockRedisStorageMockRecorder is the mock recorder for MockRedisStorage.
type MockRedisStorageMockRecorder struct {
	mock *MockRedisStorage
}

// NewMockRedisStorage creates a new mock instance.
func NewMockRedisStorage(ctrl *gomock.Controller) *MockRedisStorage {
	mock := &MockRedisStorage{ctrl: ctrl}
	mock.recorder = &MockRedisStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisStorage) EXPECT() *MockRedisStorageMockRecorder {
	return m.recorder
}

// DeleteCache mocks base method.
func (m *MockRedisStorage) DeleteCache(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteCache", arg0)
}

// DeleteCache indicates an expected call of DeleteCache.
func (mr *MockRedisStorageMockRecorder) DeleteCache(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCache", reflect.TypeOf((*MockRedisStorage)(nil).DeleteCache), arg0)
}

// GetCacheInt mocks base method.
func (m *MockRedisStorage) GetCacheInt(arg0 string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCacheInt", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCacheInt indicates an expected call of GetCacheInt.
func (mr *MockRedisStorageMockRecorder) GetCacheInt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheInt", reflect.TypeOf((*MockRedisStorage)(nil).GetCacheInt), arg0)
}

// GetStorage mocks base method.
func (m *MockRedisStorage) GetStorage() *redis.Storage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorage")
	ret0, _ := ret[0].(*redis.Storage)
	return ret0
}

// GetStorage indicates an expected call of GetStorage.
func (mr *MockRedisStorageMockRecorder) GetStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorage", reflect.TypeOf((*MockRedisStorage)(nil).GetStorage))
}

// SetCache mocks base method.
func (m *MockRedisStorage) SetCache(arg0 string, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCache", arg0, arg1)
}

// SetCache indicates an expected call of SetCache.
func (mr *MockRedisStorageMockRecorder) SetCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCache", reflect.TypeOf((*MockRedisStorage)(nil).SetCache), arg0, arg1)
}

// SetCacheInt mocks base method.
func (m *MockRedisStorage) SetCacheInt(arg0 string, arg1 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCacheInt", arg0, arg1)
}

// SetCacheInt indicates an expected call of SetCacheInt.
func (mr *MockRedisStorageMockRecorder) SetCacheInt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCacheInt", reflect.TypeOf((*MockRedisStorage)(nil).SetCacheInt), arg0, arg1)
}
